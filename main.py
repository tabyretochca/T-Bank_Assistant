import logging
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackQueryHandler
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from rag import RAGSystem

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(filename="bot.log", level=logging.INFO, format="%(asctime)s - %(message)s")

# –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
TOKEN = "YOUR_TELEGRAM_TOKEN_HERE"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG
rag_system = RAGSystem(chroma_dir="./chroma_db")

def start(update, context):
    keyboard = [
        [InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∫–∞—Ä—Ç—É", url="https://tbank.ru/kassa/form/partner/")],
        [InlineKeyboardButton("–£–∑–Ω–∞—Ç—å –ª–∏–º–∏—Ç—ã", callback_data="limits")],
        [InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", url="https://tbank.ru/support/")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(
        "üëã *–ü—Ä–∏–≤–µ—Ç!* –Ø TinkHelper. –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ.\n–ü—Ä–∏–º–µ—Ä—ã: '–ö–∞–∫ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–∏–º–∏—Ç—ã —Å—á–µ—Ç–∞?'",
        parse_mode="Markdown",
        reply_markup=reply_markup
    )
    logging.info(f"User {update.message.from_user.id}: /start")

def help_command(update, context):
    update.message.reply_text(
        "üìñ *–ü–æ–º–æ—â—å –ø–æ TinkHelper*\n\n"
        "–Ø –æ—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö T-Bank. –ü—Ä–∏–º–µ—Ä—ã:\n"
        "- –ö–∞–∫ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–∏–º–∏—Ç—ã —Å—á–µ—Ç–∞?\n"
        "- –ö–∞–∫–∏–µ –ª–∏–º–∏—Ç—ã –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥—ã?\n"
        "- –ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –∫—Ä–µ–¥–∏—Ç–Ω—É—é –∫–∞—Ä—Ç—É?\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å\n"
        "/help ‚Äî –ø–æ–º–æ—â—å\n\n"
        "–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é!",
        parse_mode="Markdown"
    )
    logging.info(f"User {update.message.from_user.id}: /help")

def button_callback(update, context):
    query = update.callback_query
    if query.data == "limits":
        context.bot.send_message(
            chat_id=query.message.chat_id,
            text="üìä –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –ª–∏–º–∏—Ç—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–ö–∞–∫ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–∏–º–∏—Ç—ã —Å—á–µ—Ç–∞?'"
        )
    query.answer()
    logging.info(f"User {query.from_user.id}: Button {query.data}")

def handle_message(update, context):
    user_id = update.message.from_user.id
    query = update.message.text
    logging.info(f"User {user_id}: {query}")

    # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if "last_query" not in context.user_data:
        context.user_data["last_query"] = ""
    if "—Å—á—ë—Ç" in query.lower() and "—Å—á—ë—Ç" in context.user_data["last_query"].lower():
        response = "–í—ã —É–∂–µ —Å–ø—Ä–∞—à–∏–≤–∞–ª–∏ –ø—Ä–æ —Å—á—ë—Ç. –•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–æ –ª–∏–º–∏—Ç—ã –∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—ã–π —Å—á—ë—Ç?"
        buttons = [
            {"text": "–£–∑–Ω–∞—Ç—å –ª–∏–º–∏—Ç—ã", "url": "https://tbank.ru/app/check-limits"},
            {"text": "–û—Ç–∫—Ä—ã—Ç—å —Å—á—ë—Ç", "url": "https://tbank.ru/kassa/form/partner/"}
        ]
    else:
        response, buttons = rag_system.get_response(query, use_llm=False)

    context.user_data["last_query"] = query

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [[InlineKeyboardButton(btn["text"], url=btn["url"])] for btn in buttons]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    update.message.reply_text(response, parse_mode="Markdown", reply_markup=reply_markup)
    logging.info(f"Response to {user_id}: {response}")

def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("help", help_command))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    dp.add_handler(CallbackQueryHandler(button_callback))
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()